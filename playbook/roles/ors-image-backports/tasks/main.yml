---

# Needed for ORS upgrading from older playbooks

  - name: Check if anacron is installed
    shell: 'which anacron'
    register: anacron_present
    ignore_errors: yes

  - name: Prevent ORS playbook from recursively running
    file: path="/opt/upgrader/ors_playbook_rerun" state="touch"
    when: anacron_present.rc != 0

  - name: Check if ors_playbook_rerun exists
    stat: path="/opt/upgrader/ors_playbook_rerun"
    register: ors_playbook_rerun

  - name: Run ORS playbook in case anacron is not installed
    shell: ansible-playbook ors.yml -i hosts 2>> /opt/upgrader/latest_ors.log >> /opt/upgrader/latest_ors.log
    ignore_errors: yes
    when: (anacron_present.rc != 0) and (ors_playbook_rerun.stat.exists == false)
    args:
      chdir: /opt/upgrader/playbook-tmp/

# Set cron to repeat ors-image-backports in case someone unplugs the ORS while this playbook is running

  - name: Set Cron to repeat until success
    cron: name="Repeat ors-image-backports until success" minute="*/4" hour="*" job="flock -n /opt/upgrader/ansible.lock -c \"PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin cd /opt/upgrader/playbook-tmp && ansible-playbook ors-image-backports.yml -i hosts 2>>/opt/upgrader/ors_image_backports.log >> /opt/upgrader/ors_image_backports.log\""

  - name: Remove obsolete cron
    cron: name="Launch Upgrader with ansible" state=absent

  - name: Remove obsolete cron
    cron: name="Launch Startup with ansible" state=absent

  - name: Remove obsolete cron
    cron: name="Launch ors playbook periodically" state=absent

  - name: Remove obsolete cron
    cron: name="Launch ors playbook at reboot" state=absent

  - name: Remove obsolete cron
    cron: name="Launch ors playbook every 3 hours" state=absent

  - name: Check if Service Exists
    stat: path=/etc/init.d/init-sdr
    register: init_sdr_service

  - name: Reload daemon
    systemd: daemon_reload=yes
    when: init_sdr_service.stat.exists

  - name: Disable old init-sdr service
    systemd: name=init-sdr enabled=no
    when: init_sdr_service.stat.exists

  - name: Fix apt
    shell: 'DEBIAN_FRONTEND=noninteractive apt install -y'
    ignore_errors: yes
    register: apt_install

  - name: Get SSD disk path
    shell: "debconf-show grub-efi-amd64 | grep install_devices_disks_changed | awk '{ print $NF }'"
    ignore_errors: yes
    register: ssd_disk
    when: apt_install.rc != 0

  - name: Fix grub install
    shell: "echo 'grub-efi grub-efi/install_devices string {{ ssd_disk.stdout }}' | debconf-set-selections && DEBIAN_FRONTEND=noninteractive apt install -y"
    when: ssd_disk.rc == 0 and apt_install.rc != 0
    ignore_errors: yes

# Configure systemd-networkd 

  - name: Configure /etc/systemd/network/dhcp.network
    copy: src=systemd-dhcp-network dest=/etc/systemd/network/dhcp.network owner=root mode=644

  - name: Create a directory if it does not exist
    file: path=/etc/systemd/system/systemd-networkd-wait-online.service.d state=directory mode=0755

  - name: Configure /etc/systemd/system/systemd-networkd-wait-online.service.d/override.conf
    copy: src=systemd-wait-online-override dest=/etc/systemd/system/systemd-networkd-wait-online.service.d/override.conf owner=root mode=644

  - name: Enable and stop systemd-networkd
    systemd: name=systemd-networkd.service enabled=yes state=stopped

## Don't use role repository because package needs to be removed after installing systemd-networkd

  - name: Remove ifupdown
    shell: 'DEBIAN_FRONTEND="noninteractive" apt remove --purge -y ifupdown'

  - name: Start systemd-networkd
    systemd: name=systemd-networkd.service enabled=yes state=started

# Configure DHCP timeout

  - name: Configure dhcp timeout
    lineinfile: dest=/etc/dhcp/dhclient.conf regexp="^timeout (.*)" line="timeout 15" state=present

# Reinitialize machine-id for DHCP

  - name: Check if machine-id needs to be reinitialized
    shell: grep -q a3c3a27a44e74547963830b967b5a7ee /etc/machine-id
    register: reinitialize_machine_id
    ignore_errors: yes

  - name: Reinitialize machine-id at next boot
    shell: 'echo uninitialized > /etc/machine-id && dpkg-reconfigure systemd'
    when: reinitialize_machine_id.rc == 0

# Configure DNS

  - name: Disable dnsmasq service
    systemd: name=dnsmasq.service enabled=no state=stopped
    ignore_errors: yes

  - name: Disable DNS stub resolver
    lineinfile: dest=/etc/systemd/resolved.conf regexp="(.*)DNSStubListener=(.*)" line="DNSStubListener=no" state=present
    register: disable_dns_stub

  - name: Create resolv symbolic link
    file:
      src: /run/systemd/resolve/resolv.conf
      dest: /etc/resolv.conf
      state: link
      force: true
    register: create_resolv_link

  - name: Configure default nameservers
    lineinfile: dest=/etc/systemd/resolved.conf regexp="^DNS=(.*)" line="DNS=1.1.1.1 8.8.8.8" state=present
    register: configure_default_nameservers

  - name: Restart systemd-resolved.service if necessary
    systemd: name=systemd-resolved.service enabled=yes state=restarted
    when: (disable_dns_stub.changed) or (create_resolv_link.changed) or (configure_default_nameservers.changed)

  - name: Enable and start systemd-resolved.service
    systemd: name=systemd-resolved.service enabled=yes state=started

  - name: Remove cron after successful run
    cron: name="Repeat ors-image-backports until success" state=absent

