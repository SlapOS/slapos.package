---

  - set_fact: cn="{{ ansible_hostname }}"

  - stat: path="{{ pkdir }}/{{ cn }}.crt"
    register: certificate

  - name: End playbook if we have no certificate yet
    meta: end_play
    when: certificate.stat.exists == False

  - name: Delete download directory
    file: path={{ install_folder }}/download state=absent

  - name: Create download directory
    file: path={{ install_folder }}/download state=directory mode=0755

  - name: Run upgrade script
    script: upgrade-amarisoft.py
    register: upgrade_script
    ignore_errors: yes

  - name: End playbook if nothing to upgrade
    meta: end_play
    when: upgrade_script.rc != 0

  - name: Get downloaded version
    shell: 'ls -1 {{ install_folder }}/download | grep amarisoft | cut -d. -f2'
    register: downloaded_version

  - set_fact: cn="{{ ansible_hostname }}"

  - set_fact: version="{{ downloaded_version.stdout }}"

  - name: Create directory if it does not exist
    file: path={{ install_folder }}/{{ version }} state=directory mode=0755

  - name: Create directory if it does not exist
    file: path={{ install_folder }}/_{{ version }} state=directory mode=0755

  - name: Decrypt key
    shell: 'openssl pkeyutl -decrypt -in {{ install_folder }}/download/symmetric_key-{{ version }}.bin.enc -inkey /opt/private-key/{{ cn }}.key -out /opt/private-key/symmetric_key-{{ version }}.key'

  - name: Decrypt archive
    script: decrypt-binaries.py /opt/private-key/symmetric_key-{{ version }}.key {{ install_folder }}/download/amarisoft.{{ version }}.tar.gz.enc {{ install_folder }}/amarisoft.tar.gz

  - name: Extract archive
    unarchive:
      src: "{{ install_folder }}/amarisoft.tar.gz"
      dest: "{{ install_folder }}"

  - name: Extract lteenb archive
    unarchive:
      src: "{{ install_folder }}/{{ version }}/lteenb-linux-{{ version }}.tar.gz"
      dest: "{{ install_folder }}/_{{ version }}"

  - name: Extract ltemme archive
    unarchive:
      src: "{{ install_folder }}/{{ version }}/ltemme-linux-{{ version }}.tar.gz"
      dest: "{{ install_folder }}/_{{ version }}"

  - name: Extract trx_sdr archive
    unarchive:
      src: "{{ install_folder }}/{{ version }}/trx_sdr-linux-{{ version }}.tar.gz"
      dest: "{{ install_folder }}/_{{ version }}"

  - name: Create a symbolic link for lteenb
    file:
      src: "lteenb-linux-{{ version }}"
      dest: "{{ install_folder }}/_{{ version }}/enb"
      state: link

  - name: Create a symbolic link for ltemme
    file:
      src: "ltemme-linux-{{ version }}"
      dest: "{{ install_folder }}/_{{ version }}/mme"
      state: link

  - name: Create a symbolic link for trx_sdr
    file:
      src: "trx_sdr-linux-{{ version }}"
      dest: "{{ install_folder }}/_{{ version }}/trx_sdr"
      state: link

  - name: Copy trx_sdr libraries
    shell: 'cp {{ install_folder }}/_{{ version }}/trx_sdr/*.so {{ install_folder }}/_{{ version }}/enb/'

  - name: Move amarisoft folder
    shell: 'mv {{ install_folder }}/_{{ version }} {{ install_folder }}/v{{ version }}'

  - name: Remove extraction folder
    file: 
      path: "{{ install_folder }}/{{ version }}"
      state: absent

