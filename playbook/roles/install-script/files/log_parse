/bin/cat << EOF > $ANSIBLE_PLUGIN_LOCATION/log_parse.py
import os
import time
import json

class CallbackModule(object):
    """
    logs playbook results, per host, in /var/log/ansible/hosts
    """

    log_path = '/var/log/ansible/hosts'

    def __init__(self):

        if not os.path.exists(self.log_path):
            os.makedirs(self.log_path)
        else:
          for filename in os.listdir(self.log_path):
            filepath = os.path.join(self.log_path, filename)
            if os.path.exists(filepath) and os.path.isfile(filepath):
              os.unlink(filepath)

    def log(self, host, category, data, ignore_errors=False):
        if type(data) == dict:
            if '_ansible_verbose_override' in data:
                # avoid logging extraneous data
                data = {}
            else:
                data = data.copy()
                data = json.dumps(data)

            if ignore_errors:
              category = '%s_INGORED' % category
            path = os.path.join("/var/log/ansible/hosts", '%s_%s' % (host, category))
            with open(path, "a") as fd:
              fd.write(data)
              fd.write('\n')

    def runner_on_failed(self, host, res, ignore_errors=False):
        self.log(host, 'FAILED', res, ignore_errors)

    def runner_on_ok(self, host, res):
        self.log(host, 'OK', res)

    def runner_on_skipped(self, host, item=None):
        pass

    def runner_on_unreachable(self, host, res):
        self.log(host, 'UNREACHABLE', res)

    def runner_on_async_failed(self, host, res, jid):
        self.log(host, 'ASYNC_FAILED', res)

    def playbook_on_import_for_host(self, host, imported_file):
        self.log(host, 'IMPORTED', imported_file)

    def playbook_on_not_import_for_host(self, host, missing_file):
        self.log(host, 'NOTIMPORTED', missing_file)

EOF