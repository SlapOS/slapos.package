---
# We cannot override extra-vars directly so we create a different fact
  - name: Set playbook_report_fact to playbook_report
    set_fact: playbook_report_fact={{ playbook_report }}

  - name: Override playbook_report_fact when extra playbook is ORS
    set_fact: playbook_report_fact=true
    when: extra_playbook == "ors.yml"

  - name: Set Cron to repeat until success
    cron: name="Repeat until success" minute="*/5" hour="*" job="curl -fIs $(grep "^deb" /etc/apt/sources.list| cut -f2 -d' ' | head -n1) && flock -n /opt/upgrader/ansible.lock -c \"rm -rf /opt/upgrader/playbook && cp -R /opt/upgrader/playbook-tmp/ /opt/upgrader/playbook && cd /opt/upgrader/playbook && PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin ansible-playbook upgrader-run.yml --extra-vars 'extra_playbook={{ extra_playbook }} upgrader_playbook={{ upgrader_playbook }} repeat_until_success={{ repeat_until_success }} upgrade_kernel={{ upgrade_kernel | default(False) == True }} playbook_report={{ playbook_report_fact }}' -i hosts 2>>/opt/upgrader/latest_repeat_upgrade.log >> /opt/upgrader/latest_repeat_upgrade.log\""
    when: repeat_until_success | bool

  - name: Get monitor private directory path
    shell: 'realpath $(dirname $(grep -lR "software_release_url = .*software/monitor/software.cfg" $(find /srv/slapgrid -type f -name "buildout.cfg")))/srv/monitor/private'
    register: monitor_path
    when: playbook_report_fact | bool
    ignore_errors: yes

  - name: Create directory if it does not exist
    file: path="{{ monitor_path.stdout }}/playbook-report" state=directory mode=0755
    when: (monitor_path is succeeded) and (playbook_report_fact | bool)

  - name: Setting playbook report message
    set_fact: playbook_report_message="Starting upgrader playbook" playbook_report_progress="0"

  - name: Render log template
    template:
      src: playbook-report.j2
      dest: /tmp/playbook-report-tmp.log
    when: (monitor_path is succeeded) and (playbook_report_fact | bool)

  - name: Append to log
    shell: 'cat /tmp/playbook-report-tmp.log >> {{ monitor_path.stdout }}/playbook-report/report.log'
    when: (monitor_path is succeeded) and (playbook_report_fact | bool)

  - file: path=/opt/upgrader state=directory mode=0755

  - stat: path=/opt/upgrader/playbook
    register: playbook_folder

  - stat: path=/opt/upgrader/last-upgrade
    register: last_upgrade

  - shell: echo 1 > /opt/upgrader/last-upgrade
    when: last_upgrade.stat.exists == False

  - file: path=/opt/upgrader/ state=directory mode=0755

  - set_fact: new_playbook=decompressed-playbook-{{ ansible_date_time.epoch }}

  - debug:
      msg: new_playbook {{ new_playbook }}

  - name: Make new playbook folder
    shell: mkdir -p /opt/upgrader/{{ new_playbook }}

  - name: Periodically download the latest playbook
    shell: /usr/local/bin/slapcache-download --destination=/opt/upgrader/archive.tar.gz

  - name: Uncompress
    shell: tar -xzvf /opt/upgrader/archive.tar.gz
    args:
      chdir: /opt/upgrader/{{ new_playbook }}

  - debug:
      msg: Uncompressed playbook to {{ new_playbook }}

  - name: Check uncompressed archive sha256sum
    shell: cd /opt/upgrader/{{ new_playbook }} && find . -type f ! -name 'sha256sum' -print0 | LC_ALL=C sort -z | xargs -0 sha256sum | sha256sum --check sha256sum

  - shell: rm -rf /opt/upgrader/tmp

  - shell: ln -s /opt/upgrader/{{ new_playbook }} /opt/upgrader/tmp

  - debug:
      msg: Make link from {{ new_playbook }} to tmp

  - shell: cp -R /opt/upgrader/{{ new_playbook }} /opt/upgrader/playbook
    when: playbook_folder.stat.exists == False

  - stat: path=/opt/upgrader/tmp/hosts
    register: hosts_file

# Delete playbook-tmp if it is not yet a symbolic link
  - shell: test -h /opt/upgrader/playbook-tmp || rm -rf /opt/upgrader/playbook-tmp
    when: hosts_file.stat.exists == True

# If the machine stops before syncing playbook-tmp will be corrupted
# If playbook-tmp is written non-atomically it might get corrupted
  - name: Move tmp to playbook-tmp
    shell: sync && mv -T /opt/upgrader/tmp /opt/upgrader/playbook-tmp
    when: hosts_file.stat.exists == True

  - shell: rm -rf $(find . -type d -name "decompressed-playbook-*"|sort|head -n-1)
    args:
      chdir: /opt/upgrader

  - name: Save new archive MD5
    stat:
      path=/opt/upgrader/archive.tar.gz
      get_md5=yes
    register:
      archive

  - name: Update playbook md5
    shell: echo {{ archive.stat.md5 }} > /opt/upgrader/next-upgrade-signature

  - name: Stat Current Upgrade Signature
    file: path=/opt/upgrader/current-upgrade-signature state=touch mode="0666"

  - name: Get /opt/upgrader/next-upgrade-signature content
    shell: cat /opt/upgrader/next-upgrade-signature
    register:
      next_upgrade_signature

  - name: Get /opt/upgrader/current-upgrade-signature content
    shell: cat /opt/upgrader/current-upgrade-signature
    register:
      current_upgrade_signature

  - name: Setting playbook report message
    set_fact: playbook_report_message="Running upgrade" playbook_report_progress="10"

  - name: Render log template
    template:
      src: playbook-report.j2
      dest: /tmp/playbook-report-tmp.log
    when: (monitor_path is succeeded) and (playbook_report_fact | bool)

  - name: Append to log
    shell: 'cat /tmp/playbook-report-tmp.log >> {{ monitor_path.stdout }}/playbook-report/report.log'
    when: (monitor_path is succeeded) and (playbook_report_fact | bool) and (lookup('file', '/opt/upgrader/playbook-tmp/upgrade_after')|int > lookup('file', '/opt/upgrader/last-upgrade')|int ) and (lookup('file', '/opt/upgrader/next-upgrade-signature') != lookup('file', '/opt/upgrader/current-upgrade-signature'))

  - name: Do upgrade
    shell: ansible-playbook {{ upgrader_playbook }} --extra-vars 'repeat_until_success={{ repeat_until_success }}' -i hosts 2>>/opt/upgrader/latest_upgrade.log  >> /opt/upgrader/latest_upgrade.log
    when: (lookup('file', '/opt/upgrader/playbook-tmp/upgrade_after')|int > lookup('file', '/opt/upgrader/last-upgrade')|int ) and (lookup('file', '/opt/upgrader/next-upgrade-signature') != lookup('file', '/opt/upgrader/current-upgrade-signature'))
    args:
      chdir: /opt/upgrader/playbook-tmp/

  - name: Setting playbook report message
    set_fact: playbook_report_message="Running extra playbook" playbook_report_progress="20"

  - name: Render log template
    template:
      src: playbook-report.j2
      dest: /tmp/playbook-report-tmp.log
    when: (monitor_path is succeeded) and (playbook_report_fact | bool)

  - name: Append to log
    shell: 'cat /tmp/playbook-report-tmp.log >> {{ monitor_path.stdout }}/playbook-report/report.log'
    when: (monitor_path is succeeded) and (playbook_report_fact | bool) and (extra_playbook | length > 0)

  - name: Do extra playbook
    shell: ansible-playbook {{ extra_playbook }} --extra-vars 'launch_upgrader=False' -i hosts 2>>/opt/upgrader/latest_extra_playbook.log  >> /opt/upgrader/latest_extra_playbook.log
    when: extra_playbook | length > 0
    args:
      chdir: /opt/upgrader/playbook-tmp/

  - name: Set Cron
    cron: name="Launch Upgrader with ansible" minute="{{ period_minute }}" hour="{{ period_hour }}" job="flock -n /opt/upgrader/ansible.lock -c \"rm -rf /opt/upgrader/playbook && cp -R /opt/upgrader/playbook-tmp/ /opt/upgrader/playbook && cd /opt/upgrader/playbook && PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin ansible-playbook upgrader-run.yml --extra-vars 'period_minute={{ period_minute }} period_hour={{ period_hour }} upgrader_playbook={{ upgrader_playbook }} upgrade_kernel={{ upgrade_kernel | default(False) == True }} playbook_report={{ playbook_report_fact }}' -i hosts 2>>/opt/upgrader/latest_upgrade.log >> /opt/upgrader/latest_upgrade.log\""
    when: repeat_until_success | bool == False

  - cron: name="Launch Upgrader" state=absent

  - name: Upgrade Current Upgrade Signature
    shell: cat /opt/upgrader/next-upgrade-signature > /opt/upgrader/current-upgrade-signature
    when: (lookup('file', '/opt/upgrader/playbook-tmp/upgrade_after')|int > lookup('file', '/opt/upgrader/last-upgrade')|int ) and (lookup('file', '/opt/upgrader/next-upgrade-signature') != lookup('file', '/opt/upgrader/current-upgrade-signature'))

  - shell: echo {{ ansible_date_time.epoch }} > /opt/upgrader/last-upgrade
    when: (lookup('file', '/opt/upgrader/playbook-tmp/upgrade_after')|int > lookup('file', '/opt/upgrader/last-upgrade')|int )

  - include: remove-legacy.yml

  - name: Setting playbook report message
    set_fact: playbook_report_message="Successfully ran playbook" playbook_report_progress="100"

  - name: Render log template
    template:
      src: playbook-report.j2
      dest: /tmp/playbook-report-tmp.log
    when: (monitor_path is succeeded) and (playbook_report_fact | bool)

  - name: Append to log
    shell: 'cat /tmp/playbook-report-tmp.log >> {{ monitor_path.stdout }}/playbook-report/report.log'
    when: (monitor_path is succeeded) and (playbook_report_fact | bool)

  - name: Remove cron after successful playbook run
    cron: name="Repeat until success" state=absent
    when: repeat_until_success | bool

  - name: Set Anacron after successful playbook run
    lineinfile: dest=/etc/anacrontab regexp="^[0-9]+ [0-9]+ extra.playbook (.*)" line="1 10 extra.playbook curl -fIs $(grep "^deb" /etc/apt/sources.list| cut -f2 -d' ' | head -n1) && flock -n /opt/upgrader/ansible.lock -c \"rm -rf /opt/upgrader/playbook && cp -R /opt/upgrader/playbook-tmp/ /opt/upgrader/playbook && cd /opt/upgrader/playbook && PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin ansible-playbook upgrader-run.yml --extra-vars 'extra_playbook={{ extra_playbook }} upgrader_playbook={{ upgrader_playbook }} repeat_until_success={{ repeat_until_success }} upgrade_kernel={{ upgrade_kernel | default(False) == True }} playbook_report={{ playbook_report_fact }}' -i hosts 2>>/opt/upgrader/latest_daily_upgrade.log >> /opt/upgrader/latest_daily_upgrade.log\"" state=present
    when: repeat_until_success | bool
