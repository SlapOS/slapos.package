---

  - name: Create /opt/upgrader where some logs will be stored
    file: path=/opt/upgrader state=directory mode=0755

  - name: Get monitor private directory path
    shell: 'realpath $(dirname $(grep -lR "software_release_url = .*software/monitor/software.cfg" $(find /srv/slapgrid -type f -name "buildout.cfg")))/srv/monitor/private'
    register: monitor_path
    when: playbook_report | bool
    ignore_errors: yes

  - name: Create directory if it does not exist
    file: path="{{ monitor_path.stdout }}/playbook-report" state=directory mode=0755
    when: (monitor_path is succeeded) and (playbook_report | bool)

# Amarisoft scripts

  - name: Create {{ amarisoft_dir }} directory
    file: path="{{ amarisoft_dir }}" state=directory mode=0755

  - name: Render get-amarisoft-info script
    template:
      src: get-amarisoft-info.j2
      dest: "{{ amarisoft_dir }}/get-amarisoft-info"
      mode: '0555'

  - name: Render get-license-info script for backwards compatibility
    template:
      src: get-amarisoft-info.j2
      dest: "{{ amarisoft_dir }}/get-license-info"
      mode: '0555'

  - name: Render init-sdr script
    template:
      src: init-sdr.j2
      dest: "{{ amarisoft_dir }}/init-sdr"
      mode: '0550'

  - name: Copy init-enb script
    copy: src=init-enb dest={{ amarisoft_dir }} owner=root mode=550

  - name: Copy init-mme script
    copy: src=init-mme dest={{ amarisoft_dir }} owner=root mode=550

  - name: Copy rm-tmp-lte script
    copy: src=rm-tmp-lte dest={{ amarisoft_dir }} owner=root mode=550

# Generate key

  - set_fact: cn="{{ ansible_hostname }}"

  - name: Create {{ pk_dir }} directory
    file: path="{{ pk_dir }}" state=directory mode=0755

  - stat: path="{{ pk_dir }}/{{ cn }}.key"
    register: private_key

  - name: Generate private key
    shell: 'openssl genrsa -out {{ pk_dir }}/{{ cn }}.key 4096'
    when: private_key.stat.exists == False

  - stat: path="{{ pk_dir }}/{{ cn }}.key"
    register: private_key

  - stat: path="{{ pk_dir }}/{{ cn }}.pub"
    register: public_key

  - name: Generate public key
    shell: 'openssl rsa -in {{ pk_dir }}/{{ cn }}.key -outform PEM -pubout -out {{ pk_dir }}/{{ cn }}.pub'
    when: private_key.stat.exists == True and public_key.stat.exists == False

  - stat: path="{{ pk_dir }}/{{ cn }}.pub"
    register: public_key
    when: (monitor_path is succeeded) and (playbook_report | bool)

  - name: Copy public key
    copy: src="{{ pk_dir }}/{{ cn }}.pub" dest="{{ monitor_path.stdout }}/playbook-report/{{ cn }}.pub" owner=root mode=774
    when: (monitor_path is succeeded) and (playbook_report | bool) and (public_key.stat.exists == True)

# Amarisoft upgrade

  - name: Configure {{ amarisoft_dir }}/shacache.cfg
    copy: src=shacache.cfg dest={{ amarisoft_dir }}/shacache.cfg owner=root mode=644

  - stat: path="{{ pk_dir }}/{{ cn }}.pub"
    register: certificate

  - name: Delete download directory
    file: path={{ amarisoft_dir }}/download state=absent
    when: certificate.stat.exists == True

  - name: Create download directory
    file: path={{ amarisoft_dir }}/download state=directory mode=0755
    when: certificate.stat.exists == True

  - name: Get license expiration
    shell: '{{ amarisoft_dir }}/get-amarisoft-info -e || echo 0000-00-00'
    register: license_expiration
    when: certificate.stat.exists == True

  - name: Get current version
    shell: '{{ amarisoft_dir }}/get-amarisoft-info -v || echo 0000-00-00.0 | cut -d. -f1'
    register: current_version
    when: certificate.stat.exists == True

  - name: Get current version timestamp
    shell: '{{ amarisoft_dir }}/get-amarisoft-info -v | grep "\." || echo 0000-00-00.0 | cut -d. -f2'
    register: current_timestamp
    when: certificate.stat.exists == True

  - debug:
      msg: "[{{ ansible_date_time.date }} {{ ansible_date_time.time }}] License will expire on {{ license_expiration.stdout }}, current version is {{ current_version.stdout }}.{{ current_timestamp.stdout }}"
    when: certificate.stat.exists == True

  - name: Get new amarisoft version if available
    shell: "networkcache-download -c {{ amarisoft_dir }}/shacache.cfg -k key-private:amarisoft 'cn==\"{{ cn }}\"' 'version<=\"{{ license_expiration.stdout }}\"' 'timestamp>=\"0\"' 'version>>\"0\"' 'timestamp>>\"0\"' --list | grep version | cut -d\\\" -f4"
    register: new_version
    when: certificate.stat.exists == True

  - name: Get new amarisoft timestamp if available
    shell: "networkcache-download -c {{ amarisoft_dir }}/shacache.cfg -k key-private:amarisoft 'cn==\"{{ cn }}\"' 'version<=\"{{ license_expiration.stdout }}\"' 'timestamp>=\"0\"' 'version>>\"0\"' 'timestamp>>\"0\"' --list | grep timestamp | cut -d\\\" -f4"
    register: new_timestamp
    when: certificate.stat.exists == True

  - set_fact: new_version_found=False

  - set_fact: new_version_found=True
    when: new_version.stdout > current_version.stdout or (new_version.stdout == current_version.stdout and new_timestamp.stdout > current_timestamp.stdout)

  - debug:
      msg: "[{{ ansible_date_time.date }} {{ ansible_date_time.time }}] Found version {{ new_version.stdout }}.{{ new_timestamp.stdout }}"
    when: certificate.stat.exists == True

  - name: Download nonce to decrypt new amarisoft version
    shell: "networkcache-download -c {{ amarisoft_dir }}/shacache.cfg -k file-private:amarisoft 'version==\"{{ new_version.stdout }}\"' 'timestamp==\"{{ new_timestamp.stdout }}\"' --list | grep nonce | cut -d\\\" -f4 > {{ amarisoft_dir }}/download/nonce"
    register: nonce
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - set_fact: version="{{ new_version.stdout }}"
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Download new amarisoft version
    shell: "networkcache-download -c {{ amarisoft_dir }}/shacache.cfg -k file-private:amarisoft 'version==\"{{ new_version.stdout }}\"' 'timestamp==\"{{ new_timestamp.stdout }}\"' > {{ amarisoft_dir }}/download/amarisoft.tar.gz.enc"
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Download encrypted symmetric key for new amarisoft version
    shell: "networkcache-download -c {{ amarisoft_dir }}/shacache.cfg -k key-private:amarisoft 'cn==\"{{ cn }}\"' 'version==\"{{ new_version.stdout }}\"' 'timestamp==\"{{ new_timestamp.stdout }}\"' > {{ amarisoft_dir }}/download/symmetric_key.bin.enc"
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Create directory if it does not exist
    file: path={{ amarisoft_dir }}/{{ version }} state=directory mode=0755
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Create directory if it does not exist
    file: path={{ amarisoft_dir }}/_{{ version }} state=directory mode=0755
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Decrypt key
    shell: 'openssl pkeyutl -decrypt -in {{ amarisoft_dir }}/download/symmetric_key.bin.enc -inkey /opt/private-key/{{ cn }}.key -out /opt/private-key/symmetric_key-{{ version }}.key'
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Decrypt archive
    script: encrypt-data.sh /opt/private-key/symmetric_key-{{ version }}.key {{ amarisoft_dir }}/download/nonce decrypt {{ amarisoft_dir }}/download/amarisoft.tar.gz.enc {{ amarisoft_dir }}/amarisoft.tar.gz
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Extract archive
    unarchive:
      src: "{{ amarisoft_dir }}/amarisoft.tar.gz"
      dest: "{{ amarisoft_dir }}"
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Extract lteenb archive
    unarchive:
      src: "{{ amarisoft_dir }}/{{ version }}/lteenb-linux-{{ version }}.tar.gz"
      dest: "{{ amarisoft_dir }}/_{{ version }}"
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Extract ltemme archive
    unarchive:
      src: "{{ amarisoft_dir }}/{{ version }}/ltemme-linux-{{ version }}.tar.gz"
      dest: "{{ amarisoft_dir }}/_{{ version }}"
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Extract trx_sdr archive
    unarchive:
      src: "{{ amarisoft_dir }}/{{ version }}/trx_sdr-linux-{{ version }}.tar.gz"
      dest: "{{ amarisoft_dir }}/_{{ version }}"
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Create a symbolic link for lteenb
    file:
      src: "lteenb-linux-{{ version }}"
      dest: "{{ amarisoft_dir }}/_{{ version }}/enb"
      state: link
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Create a symbolic link for ltemme
    file:
      src: "ltemme-linux-{{ version }}"
      dest: "{{ amarisoft_dir }}/_{{ version }}/mme"
      state: link
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Create a symbolic link for trx_sdr
    file:
      src: "trx_sdr-linux-{{ version }}"
      dest: "{{ amarisoft_dir }}/_{{ version }}/trx_sdr"
      state: link
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Copy trx_sdr libraries
    shell: 'cp {{ amarisoft_dir }}/_{{ version }}/trx_sdr/*.so* {{ amarisoft_dir }}/_{{ version }}/enb/'
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Copy libraries to mme
    shell: 'cp {{ amarisoft_dir }}/{{ version }}/libs/*.so* {{ amarisoft_dir }}/_{{ version }}/mme/'
    when: (certificate.stat.exists == True) and (new_version_found == True)
    ignore_errors: True

  - name: Copy libraries to mme
    shell: 'cp {{ amarisoft_dir }}/{{ version }}/libs/linux/*.so* {{ amarisoft_dir }}/_{{ version }}/mme/'
    when: (certificate.stat.exists == True) and (new_version_found == True)
    ignore_errors: True

  - name: Copy libraries to enb
    shell: 'cp {{ amarisoft_dir }}/{{ version }}/libs/*.so* {{ amarisoft_dir }}/_{{ version }}/enb/'
    when: (certificate.stat.exists == True) and (new_version_found == True)
    ignore_errors: True

  - name: Copy libraries to enb
    shell: 'cp {{ amarisoft_dir }}/{{ version }}/libs/linux/*.so* {{ amarisoft_dir }}/_{{ version }}/enb/'
    when: (certificate.stat.exists == True) and (new_version_found == True)
    ignore_errors: True

  - name: Move amarisoft folder
    shell: 'mv {{ amarisoft_dir }}/_{{ version }} {{ amarisoft_dir }}/v{{ version }}.{{ new_timestamp.stdout }}'
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Remove extraction folder
    file: 
      path: "{{ amarisoft_dir }}/{{ version }}"
      state: absent
    when: (certificate.stat.exists == True) and (new_version_found == True)

  - name: Get Amarisoft version
    shell: '{{ amarisoft_dir }}/get-amarisoft-info -v'
    register: amarisoft_version

  - set_fact:
      amarisoft_path: "{{ amarisoft_dir }}/v{{ amarisoft_version.stdout }}"

# Log to playbook report

  - name: Get monitor private directory path
    shell: 'realpath $(dirname $(grep -lR "software_release_url = .*software/monitor/software.cfg" $(find /srv/slapgrid -type f -name "buildout.cfg")))/srv/monitor/private'
    register: monitor_path
    when: playbook_report | bool
    ignore_errors: yes

  - name: Create {{ monitor_path.stdout }}/playbook-report directory
    file: path="{{ monitor_path.stdout }}/playbook-report" state=directory mode=0755
    when: (monitor_path is succeeded) and (playbook_report | bool)

  - name: Check registry URL
    shell: "grep registry /etc/re6stnet/re6stnet.conf | awk '{ print $2; }'"
    register: registry_url
    ignore_errors: yes

  - name: Setting playbook report message
    set_fact:
      playbook_report_message: "Starting ors playbook"
      playbook_report_progress: "30"
      data: { 'registry_url': "{{ registry_url.stdout }}", 'amarisoft_version': "{{ amarisoft_version.stdout }}"}

  - name: Render log template
    template:
      src: playbook-report.j2
      dest: /tmp/playbook-report-tmp.log
    when: (monitor_path is succeeded) and (playbook_report | bool)

  - name: Append to log
    shell: 'cat /tmp/playbook-report-tmp.log >> {{ monitor_path.stdout }}/playbook-report/report.log'
    when: (monitor_path is succeeded) and (playbook_report | bool) and (extra_playbook | length > 0)


# SSD image backports

  - stat: path=/opt/upgrader/last-backport
    register: last_backport

  - stat: path=/opt/upgrader/playbook-tmp/ors_backport_after
    register: ors_backport_after

  - shell: echo 1 > /opt/upgrader/last-backport
    when: last_backport.stat.exists == False

  - name: Do ors backport
    shell: ansible-playbook ors-image-backports.yml -i hosts 2>>/opt/upgrader/ors_backport.log  >> /opt/upgrader/ors_backport.log
    when: (ors_backport_after.stat.exists == True) and (lookup('file', '/opt/upgrader/playbook-tmp/ors_backport_after')|int > lookup('file', '/opt/upgrader/last-backport')|int )
    args:
      chdir: /opt/upgrader/playbook-tmp/

  - shell: echo {{ ansible_date_time.epoch }} > /opt/upgrader/last-backport
    when: (ors_backport_after.stat.exists == True) and (lookup('file', '/opt/upgrader/playbook-tmp/ors_backport_after')|int > lookup('file', '/opt/upgrader/last-backport')|int )

# Radio Hardware

  - name: Create {{ sdr_dir }} directory
    file: path={{ sdr_dir }} state=directory mode=0755

  - name: Copy get-sdr-info script
    copy: src=get-sdr-info dest={{ sdr_dir }} owner=root mode=550

# Re6st

  - name: Configure re6st
    script: configure-re6st

# Slapos

  - name: Enable and start cron.service
    systemd: name=cron.service enabled=yes state=started

  - name: Configure slapos
    script: configure-slapos.py

  - name: Create {{ simpleran_dir }} directory
    file: path={{ simpleran_dir }} state=directory mode=0755

  - name: Copy format-ims script
    copy: src=format-ims dest={{ simpleran_dir }} owner=root mode=550

# Amarisoft software

  - name: Check if lteenb has capabilities
    shell: 'getcap {{ amarisoft_path }}/enb/lteenb | grep -q cap_sys_nice'
    ignore_errors: yes
    register: lteenb_cap

  - name: Set capabilities on lteenb
    shell: 'patchelf --set-rpath {{ amarisoft_path }}/enb {{ amarisoft_path }}/enb/lteenb && setcap cap_sys_nice=+pe {{ amarisoft_path }}/enb/lteenb'
    when: lteenb_cap.rc != 0

  - name: Check if lteenb-avx2 has capabilities
    shell: 'getcap {{ amarisoft_path }}/enb/lteenb-avx2 | grep -q cap_sys_nice'
    ignore_errors: yes
    register: lteenb_avx2_cap

  - name: Set capabilities on lteenb-avx2
    shell: 'patchelf --set-rpath {{ amarisoft_path }}/enb {{ amarisoft_path }}/enb/lteenb-avx2 && setcap cap_sys_nice=+pe {{ amarisoft_path }}/enb/lteenb-avx2'
    when: lteenb_avx2_cap.rc != 0

  - name: Check if lteims has capabilities
    shell: 'getcap {{ amarisoft_path }}/mme/lteims | grep cap_sys_admin | grep -q cap_net_raw'
    ignore_errors: yes
    register: lteims_cap

  - name: Set capabilities on lteims
    shell: 'patchelf --set-rpath {{ amarisoft_path }}/mme {{ amarisoft_path }}/mme/lteims && setcap cap_sys_admin,cap_net_raw=+pe {{ amarisoft_path }}/mme/lteims'
    when: lteims_cap.rc != 0

  - name: Create .amarisoft directory for SR
    file: path={{ amarisoft_dir }}/.amarisoft state=directory

  - name: Copy keys for SR
    copy: src=/root/.amarisoft dest={{ amarisoft_dir }} owner=root mode=644
    ignore_errors: yes

  - name: Configure sudoers
    script: configure-sudoers {{ amarisoft_dir }} {{ amarisoft_version.stdout }} {{ sdr_dir }}

# Network

  - name: Configure firewall
    script: configure-firewall

  - name: Configure IPv4 forwarding
    lineinfile: dest=/etc/sysctl.conf regexp="^net.ipv4.conf.all.forwarding=(.*)" line="net.ipv4.conf.all.forwarding=1" state=present

  - name: Configure IPv6 forwarding
    lineinfile: dest=/etc/sysctl.conf regexp="^net.ipv6.conf.all.forwarding=(.*)" line="net.ipv6.conf.all.forwarding=1" state=present

  - name: Improve network stack behaviour (for core network)
    lineinfile: dest=/etc/sysctl.conf regexp="^net.ipv4.tcp_congestion_control=(.*)" line="net.ipv4.tcp_congestion_control=bbr" state=present

  - name: Improve network stack behaviour (for core network)
    lineinfile: dest=/etc/sysctl.conf regexp="^net.core.rmem_max=(.*)" line="net.core.rmem_max=50000000" state=present

  - name: Improve network stack behaviour (for core network)
    lineinfile: dest=/etc/sysctl.conf regexp="^net.core.wmem_max=(.*)" line="net.core.wmem_max=5000000" state=present

  - name: Redirect 53 to 5353
    ansible.builtin.iptables:
      chain: PREROUTING
      table: nat
      protocol: udp
      match: udp
      jump: DNAT
      destination_port: '53'
      to_destination: ':5353'

  - name: Redirect 5353 to 53
    ansible.builtin.iptables:
      chain: POSTROUTING
      table: nat
      protocol: udp
      match: udp
      jump: SNAT
      source_port: '5353'
      to_source: ':53'

# System

  - name: Configure journald log size
    lineinfile: dest=/etc/systemd/journald.conf regexp="^SystemMaxUse=(.*)" line="SystemMaxUse=1G" state=present

  - name: Add kernel parameter
    script: configure-grub

# eNB performance

  - name: Disable ondemand service (changes CPU governor)
    systemd: name=ondemand.service enabled=no state=stopped
    ignore_errors: yes

# SSH

  - name: Configure ssh
    lineinfile: dest=/etc/ssh/sshd_config regexp="^PermitRootLogin (.*)" line="PermitRootLogin yes" state=present

  - name: Configure ssh
    lineinfile: dest=/etc/ssh/sshd_config regexp="^PasswordAuthentication (.*)" line="PasswordAuthentication yes" state=present

# Schedule and upgrade playbook

  - name: Install upgrader
    shell: ansible-playbook upgrader-run.yml --extra-vars 'extra_playbook={{ extra_playbook }} upgrader_playbook={{ upgrader_playbook }} repeat_until_success={{ repeat_until_success }} upgrade_kernel={{ upgrade_kernel | default(False) == True }} playbook_report={{ playbook_report }}' -i hosts 2>>/opt/upgrader/latest_daily_upgrade.log >> /opt/upgrader/latest_daily_upgrade.log
    when: launch_upgrader | bool

  - name: Add format-ims script to cron after slapos node boot
    lineinfile: dest=/etc/cron.d/slapos-node regexp="@reboot root /opt/slapos/bin/slapos node boot(.*)" line="@reboot root /opt/slapos/bin/slapos node boot >> /opt/slapos/log/slapos-node-format.log 2>&1 ; {{ simpleran_dir }}/format-ims {{ simpleran_dir }}/format-ims.log" state=present

  - name: Add format-ims script to cron after slapos node format
    lineinfile: dest=/etc/cron.d/slapos-node regexp="(.*)root /opt/slapos/bin/slapos node format(.*)" line="0 * * * * root /opt/slapos/bin/slapos node format >> /opt/slapos/log/slapos-node-format.log 2>&1 ; {{ simpleran_dir }}/format-ims {{ simpleran_dir }}/format-ims.log" state=present

  - name: Add format-ims script to cron every minute
    lineinfile: dest=/etc/cron.d/slapos-node regexp="(.*)root (\S*)/format-ims(.*)" line="* * * * * root {{ simpleran_dir }}/format-ims {{ simpleran_dir }}/format-ims.log" state=present

