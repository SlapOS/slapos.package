diff --git a/slapos/format.py b/slapos/format.py
index 0f81df9..3e954e4 100644
--- a/slapos/format.py
+++ b/slapos/format.py
@@ -523,10 +523,11 @@ class User(object):
     # XXX: This method shall be no-op in case if all is correctly setup
     #      This method shall check if all is correctly done
     #      This method shall not reset groups, just add them
+    grpname = 'grp_' + self.name if sys.platform == 'cygwin' else self.name
     try:
-      grp.getgrnam(self.name)
+      grp.getgrnam(grpname)
     except KeyError:
-      callAndRead(['groupadd', self.name])
+      callAndRead(['groupadd', grpname])
 
     user_parameter_list = ['-d', self.path, '-g', self.name, '-s',
       '/bin/false']
@@ -697,6 +698,9 @@ class Interface(object):
     except KeyError:
       raise ValueError("%s must have at least one IPv6 address assigned" % \
                          interface_name)
+    if sys.platform == 'cygwin':
+      for q in address_list:
+        q.setdefault('netmask', 'FFFF:FFFF:FFFF:FFFF:FFFF::')
     # XXX: Missing implementation of Unique Local IPv6 Unicast Addresses as
     # defined in http://www.rfc-editor.org/rfc/rfc4193.txt
     # XXX: XXX: XXX: IT IS DISALLOWED TO IMPLEMENT link-local addresses as
@@ -781,7 +785,7 @@ class Interface(object):
       return True
 
     # check existence on interface for ipv6
-    _, result = callAndRead(['ip', 'addr', 'list', interface_name])
+    _, result = callAndRead(['ip', '-6', 'addr', 'list', interface_name])
     for l in result.split('\n'):
       if address in l:
         if 'tentative' in l:
@@ -811,7 +815,8 @@ class Interface(object):
 
   def addIPv4LocalAddress(self, addr=None):
     """Adds local IPv4 address in ipv4_local_network"""
-    netmask = '255.255.255.255'
+    netmask = str(netaddr.IPNetwork(self.ipv4_local_network).netmask) \
+              if sys.platform == 'cygwin' else '255.255.255.255'
     local_address_list = self.getIPv4LocalAddressList()
     if addr is None:
       return self._generateRandomIPv4Address(netmask)
@@ -1140,7 +1145,7 @@ class Config(object):
       except ValueError:
         pass
       except OSError:
-        missing_binary_list.append(b)
+        missing_binary_list.append(b[0])
     if missing_binary_list:
       raise UsageError('Some required binaries are missing or not '
           'functional: %s' % (','.join(missing_binary_list), ))
@@ -1232,7 +1237,9 @@ class Config(object):
       self.checkRequiredBinary(['brctl'])
 
     # Check if root is needed
-    if (self.alter_network or self.alter_user) and not self.dry_run:
+    if sys.platform == 'cygwin':
+      root_needed = False
+    elif (self.alter_network or self.alter_user) and not self.dry_run:
       root_needed = True
     else:
       root_needed = False
